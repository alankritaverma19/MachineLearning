import numpy as np
import matplotlib.pyplot as plt

np.random.seed(42)
X = 2 * np.random.rand(100, 1) 
y = 4 + 3 * X + np.random.randn(100, 1)

X_b = np.c_[np.ones((100, 1)), X] 

theta = np.random.randn(2, 1)

learning_rate = 0.1
n_epochs = 1000
m = len(X_b)

for epoch in range(n_epochs):
    for i in range(m):
        random_index = np.random.randint(m)
        xi = X_b[random_index:random_index+1]
        yi = y[random_index:random_index+1]

        prediction = xi.dot(theta)

        error = prediction - yi

        gradient = xi.T.dot(error)
        theta -= learning_rate * gradient  

    if epoch % 100 == 0:
        cost = np.sum((X_b.dot(theta) - y) ** 2) / (2 * m)
        print(f"Epoch {epoch}, Cost: {cost}")

print("Final parameters (theta):", theta)

plt.scatter(X, y, color='blue', label='Data points')
plt.plot(X, X_b.dot(theta), color='red', label='SGD Linear Regression Model')
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.show()
